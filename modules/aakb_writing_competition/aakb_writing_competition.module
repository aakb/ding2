<?php
/**
 * @file
 * Handle basic module and the user based form.
 */

/**
 * Implements hook_permission().
 */
function aakb_writing_competition_permission() {
  return array(
    'access writing competition' => array(
      'title' => t('Access writing competition'),
      'description' => t('See competition settings and contributes.'),
    ),
    'export writing competition' => array(
      'title' => t('Export writing competition'),
      'description' => t('Export submitted contributes.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function aakb_writing_competition_menu() {
  $items = [];

  $items['skrivekonkurrence'] = [
    'title' => _aakb_writing_competition_t('Writing competition'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['aakb_writing_competition_form'],
    'access callback' => TRUE,
  ];

  $items['admin/config/ding/competition'] = [
    'title' => 'Writing competition',
    'description' => t('See competition settings and contributes.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['aakb_writing_competition_admin'],
    'access arguments' => ['access writing competition'],
    'file' => 'includes/aakb_writing_competition.admin.inc',
    'priority' => 1,
  ];

  $items['admin/config/ding/competition/config'] = array(
    'title' => 'Configuration',
    'description' => 'See competition settings and contributes',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/ding/competition/export'] = array(
    'title' => 'Export',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'aakb_writing_competition_export',
    'access arguments' => ['export writing competition'],
    'file' => 'includes/aakb_writing_competition.export.inc',
    'weight' => -20,
  );

  $items['admin/config/ding/competition/export/excel'] = array(
    'title' => 'Export',
    'type' => MENU_CALLBACK,
    'page callback' => 'aakb_writing_competition_export_excel',
    'access arguments' => ['export writing competition'],
    'file' => 'includes/aakb_writing_competition.export.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function aakb_writing_competition_theme($existing, $type, $theme, $path) {
  return array(
    'aakb_writing_competition_export' => array(
      'variables' => array(
        'count' => NULL,
        'link' => NULL,
      ),
      'template' => 'templates/aakb-writing-competition-export'
    ),
  );
}

/**
 * Implements hook_form().
 */
function aakb_writing_competition_form($form, &$form_state, $no_js_use = FALSE) {
  // Disable page cache for this form as it has "add one more" that will return
  // cached content and not another rendering with more options.
  drupal_page_is_cacheable(FALSE);

  $form['#prefix'] = '<h1>' . _aakb_writing_competition_t('Writing Competition') .'</h1>';
  $form['type'] = [
    '#type' => 'select',
    '#title' => _aakb_writing_competition_t('Select who you are?'),
    '#options' => [
      'parent' => _aakb_writing_competition_t('Parent'),
      'teacher' => _aakb_writing_competition_t('Teacher'),
    ],
    '#required' => TRUE,
  ];

  $config = _aakb_writing_competition_get_config();
  $form['parent'] = [
    '#type' => 'fieldset',
    '#title' => _aakb_writing_competition_t('Parent information'),
    '#description' => $config['parent']['value'],
    '#tree' => TRUE,
    '#states' => [
      'visible' => array(
        ':input[name="type"]' => array(
          'value' => 'parent',
        ),
      ),
    ],
  ];

  $form['parent']['name'] = [
    '#type' => 'textfield',
    '#title' => _aakb_writing_competition_t('Parent name'),
  ];

  $form['parent']['mail'] = [
    '#type' => 'textfield',
    '#title' => _aakb_writing_competition_t('Parent e-mail-address'),
    '#element_validate' => ['aakb_writing_competition_validate_mail'],
  ];

  $form['teacher'] = [
    '#type' => 'fieldset',
    '#title' => _aakb_writing_competition_t('Teacher information'),
    '#description' => $config['teacher']['value'],
    '#tree' => TRUE,
    '#states' => [
      'visible' => array(
        ':input[name="type"]' => array(
          'value' => 'teacher',
        ),
      ),
    ],
  ];

  $form['teacher']['name'] = [
    '#type' => 'textfield',
    '#title' => _aakb_writing_competition_t('Teacher name'),
  ];

  $form['teacher']['mail'] = [
    '#type' => 'textfield',
    '#title' => _aakb_writing_competition_t('Teacher e-mail-address'),
    '#element_validate' => ['aakb_writing_competition_validate_mail'],
  ];

  $form['teacher']['grade'] = [
    '#type' => 'textfield',
    '#title' => _aakb_writing_competition_t('Grade'),
  ];

  $form['contribution'] = [
    '#type' => 'fieldset',
    '#title' => _aakb_writing_competition_t('Contribution'),
    '#prefix' => '<div id="contributions-fieldset-wrapper">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
  ];

  if (empty($form_state['num_contributions'])) {
    $form_state['num_contributions'] = 1;
  }
  for ($i = 0; $i < $form_state['num_contributions']; $i++) {
    $form['contribution'][$i] = [
      '#type' => 'fieldset',
      '#title' => $form_state['num_contributions'] != 1 ? _aakb_writing_competition_t('Number !num', ['!num' => $i + 1]) : '',
    ];

    $form['contribution'][$i]['name'] = [
      '#type' => 'textfield',
      '#title' => _aakb_writing_competition_t('Name'),
      '#required' => TRUE,
    ];

    $form['contribution'][$i]['age'] = [
      '#type' => 'textfield',
      '#title' => _aakb_writing_competition_t('Age'),
      '#required' => TRUE,
      '#element_validate' => ['element_validate_integer_positive'],
    ];

    $form['contribution'][$i]['text'] = [
      '#type' => 'textarea',
      '#title' => _aakb_writing_competition_t('Text'),
      '#required' => TRUE,
      '#maxlength_js' => TRUE,
      '#maxlength' => 500,
      '#default_value' => '',
    ];
  }

  $form['contribution']['add_contribution'] = array(
    '#type' => 'submit',
    '#value' => _aakb_writing_competition_t('Add another contribution'),
    '#submit' => array(
      'aakb_writing_competition_add_more_add_one',
    ),
    '#states' => [
      'visible' => array(
        ':input[name="type"]' => array(
          'value' => 'teacher',
        ),
      ),
    ],
    '#ajax' => array(
      'callback' => 'aakb_writing_competition_add_more_callback',
      'wrapper' => 'contributions-fieldset-wrapper',
    ),
  );

  if ($form_state['num_contributions'] > 1) {
    $form['contribution']['remove_name'] = array(
      '#type' => 'submit',
      '#value' => _aakb_writing_competition_t('Remove last entry'),
      '#submit' => array(
        'aakb_writing_competition_add_more_remove_one',
      ),
      '#ajax' => array(
        'callback' => 'aakb_writing_competition_add_more_callback',
        'wrapper' => 'contributions-fieldset-wrapper',
      ),
    );
  }

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => _aakb_writing_competition_t('Submit contribution'),
  ];

  return $form;
}

/**
 * E-mail field validation.
 *
 * @param $element
 * @param $form_state
 */
function aakb_writing_competition_validate_mail($element, &$form_state) {
  $value = $element['#value'];

  // We have more mail fields in the form that should be ignore based on the
  // type selected in the form.
  $ignore = $element['#parents'][0] !== $form_state['values']['type'];
  if (!$ignore && !valid_email_address($value)) {
    form_error($element, 'Your email address appears malformed');
  }
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the names in it.
 */
function aakb_writing_competition_add_more_callback($form, $form_state) {
  return $form['contribution'];
}

/**
 * Submit handler for the "add-one-more" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function aakb_writing_competition_add_more_add_one($form, &$form_state) {
  $form_state['num_contributions']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the "remove one" button.
 *
 * Decrements the max counter and causes a form rebuild.
 */
function aakb_writing_competition_add_more_remove_one($form, &$form_state) {
  if ($form_state['num_contributions'] > 1) {
    $form_state['num_contributions']--;
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the contribution form.
 */
function aakb_writing_competition_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $type = $values['type'];
  $record = [
    'submitted' => time(),
    'type' => $type,
    'name' => $values[$type]['name'],
    'mail' => $values[$type]['mail'],
    'contrib_grade' => $type === 'teacher' ? $values[$type]['grade'] : '',
  ];

  unset($values['contribution']['add_contribution']);
  foreach ($values['contribution'] as $contribution) {
    $new = $record + [
      'contrib_name' => $contribution['name'],
      'contrib_age' => $contribution['age'],
      'contribution' => $contribution['text'],
    ];
    drupal_write_record('writing_competition', $new);
  }

  drupal_set_message(_aakb_writing_competition_t('Thanks for contributing to the writing competition'));
}

/**
 * Translation helper function.
 *
 * @param string $string
 *   The string to translate.
 * @param array $args
 *   Arguments to substitution in the string.
 *
 * @return array|mixed|string|null
 *   The translation.
 */
function _aakb_writing_competition_t($string, $args = []) {
  return t($string, $args, ['context' => 'writing_competition']);
}

function _aakb_writing_competition_get_config() {
  return variable_get('aakb_writing_competition', []) + [
    'parent' => [
      'format' => 'ding_wysiwyg',
      'value' => '',
    ],
    'teacher' => [
      'format' => 'ding_wysiwyg',
      'value' => '',
    ],
  ];
}
