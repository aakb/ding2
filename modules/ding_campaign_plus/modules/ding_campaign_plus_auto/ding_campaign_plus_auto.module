<?php
/**
 * @file
 * Code for the Ding Campaign Plus Auto generate module.
 */

/**
 * Implements hook_form_ding_campaign_plus_admin_settings_alter().
 *
 * Add auto-generate campaign configuration options to campaign administration
 * form.
 */
function ding_campaign_plus_auto_form_ding_campaign_plus_admin_settings_alter(&$form, &$form_state, $form_id) {
  $form['ding_campaign_plus_auto'] = array(
    '#type' => 'fieldset',
    '#title' => 'Generated campaigns',
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $default = variable_get('ding_campaign_plus_auto', array());

  // Build options to auto generate campaigns.
  $data = ding_campaign_plus_rules_info();
  foreach ($data as $module => $info) {
    if (isset($info['auto'])) {
      $callback = $info['auto'];
      $form['ding_campaign_plus_auto'][$module] = array(
        '#type' => 'fieldset',
        '#title' => $info['title'],
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#states' => array(
          'invisible' => array(
            ':input[name="ding_campaign_plus_auto[enabled]"]' => array('checked' => FALSE),
          ),
        ),
        'config' => $callback($form_state, $default[$module]['config']),
      );
    }
  }

  $form += array('#submit' => array());
  $form['#submit'][] = 'ding_campaign_plus_auto_admin_settings_form_submit';
}

/**
 * Submit handler for the admin form.
 */
function ding_campaign_plus_auto_admin_settings_form_submit(&$form, &$form_state) {
  variable_set('ding_campaign_plus_auto',  $form_state['values']['ding_campaign_plus_auto']);
}

/**
 * Implements hook_form_alter().
 *
 * Add auto-generate options to content types that we support. Only for new
 * content.
 */
function ding_campaign_plus_auto_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form_state['node']->nid) && isset($form['#node_edit_form']) && $form['#node_edit_form']) {
    if (in_array($form['#node']->type, _ding_campaign_plus_auto_content_types())) {
      $form['ding_campaign_plus_auto_generate'] = array(
        '#type' => 'fieldset',
        '#title' => t('Campaign'),
        '#description' => t('Generate campaign based on this'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#weight' => 50,
        '#tree' => TRUE,
      );

      $form['ding_campaign_plus_auto_generate']['enable'] = array(
        '#type' => 'checkbox',
        '#title' => t('Generate campaign'),
        '#desecription' => t('Generate campaign based on the current content.'),
        '#default_value' => FALSE,
      );

      $form['ding_campaign_plus_auto_generate']['link'] = array(
        '#type' => 'textfield',
        '#title' => t('Link campaign too'),
        '#desecription' => t('When clicked where should the user be sent.'),
        '#default_value' => '<front>',
      );

      $form += array('#submit' => array());
      array_unshift($form['#submit'], 'ding_campaign_plus_auto_form_submit');
    }
  }
}

/**
 * Submit handler for the auto-generate campaign form.
 */
function ding_campaign_plus_auto_form_submit($form, &$form_state) {
  if ($form_state['values']['ding_campaign_plus_auto_generate']['enable']) {
    // Create "fake" node entity based on form values.
    $node = entity_metadata_wrapper('node', (object) $form_state['values']);

    // Create campaign.
    global $user;
    $campaign_node = new stdClass();
    $campaign_node->title = $node->label();
    $campaign_node->type = "ding_campaign_plus";
    node_object_prepare($campaign_node);
    $campaign_node->language = LANGUAGE_NONE;
    $campaign_node->uid = $user->uid;
    $campaign_node->status = 1;

    $campaign_wrapper = entity_metadata_wrapper('node', $campaign_node);
    $campaign_wrapper->field_ding_campaign_plus_type->set('campaign_text_and_image');
    $campaign_wrapper->field_ding_campaign_plus_style->set('ribbon');
    $campaign_wrapper->field_ding_campaign_plus_link->set(array(
      'url' => $form_state['values']['ding_campaign_plus_auto_generate']['link']
    ));

    $field = 'field_' . $node->getBundle() . '_title_image';
    $image = $node->{$field}->value();
    if ($image['fid'] !== 0) {
      $campaign_wrapper->field_ding_campaign_plus_image->set($image);
    }
    else {
      $campaign_wrapper->field_ding_campaign_plus_type->set('campaign_text');
    }

    // Add triggers for the new campaign
    $config = variable_get('ding_campaign_plus_auto', array());
    $campaign_node->tabs = array();
    foreach (module_implements('ding_campaign_plus_auto_trigger') as $module) {
      $campaign_node->tabs += module_invoke($module, 'ding_campaign_plus_auto_trigger', $config[$module]['config'], $campaign_node, $form_state['values']);
    }

    // Save campaign node. Which will also trigger the node insert hook below,
    // which will save the campaign nid for the actual insert of the content
    // this campaign is generate for. This can then be used to link the content
    // and this campaign.
    $campaign_node = node_submit($campaign_node);
    node_save($campaign_node);
  }
}

/**
 * Implements hook_node_insert().
 */
function ding_campaign_plus_auto_node_insert($node) {
  if ($node->type == 'ding_campaign_plus') {
    $nid = drupal_static(__FUNCTION__);
    $nid = $node->nid;
  }
  else {
    $campaign_nid = drupal_static(__FUNCTION__);
    if ($campaign_nid) {
      db_insert('ding_campaign_plus_auto')
        ->fields(array('nid', 'campaign_nid'), array($node->nid, $campaign_nid))
        ->execute();

      // Reset campaign nid.
      $campaign_nid = FALSE;
    }
  }
}

/**
 * Implements hook_node_load().
 */
function ding_campaign_plus_auto_node_load($nodes, $types) {
  foreach ($nodes as &$node) {
    if (in_array($node->type, _ding_campaign_plus_auto_content_types())) {
      $nid = db_select('ding_campaign_plus_auto', 'dcpa')
        ->fields('dcpa', array('nid'))
        ->condition('nid', $node->nid)
        ->execute()
        ->fetchCol();

      if ($nid) {
        $node->ding_campaign_plus_auto = reset($nid);
      }
    }
  }
}

/**
 * Node edit forms that should have the auto-generated campaign checkbox.
 *
 * @return array
 *   The form ID's for the edit forms.
 */
function _ding_campaign_plus_auto_content_types() {
  return array(
    'ding_event',
    'ding_news',
  );
}
