<?php
/**
 * @file
 *
 */

/**
 * Implements hook_das_menu().
 */
function ting_das_menu() {
  $items = array();

  $items['admin/config/ting/das'] = array(
    'title' => 'Digital article service',
    'description' => 'Configure access to DAS.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_das_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/ting_das.admin.inc',
  );

  $items['das/%ting_object/order'] = array(
    'page callback' => 'ting_das_ajax',
    'page arguments' => array(1),
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('perform das request'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ting_das_permission() {
  return array(
    'perform das request' => array(
      'title' => t('Perform request for Digital Article copy'),
      'description' => t('Perform request to KB digital article service.'),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
function ting_das_libraries_info() {
  return array(
    'guzzle' => array(
      'name' => 'Guzzle',
      'vendor url' => 'https://github.com/guzzle/guzzle',
      'download url' => 'https://github.com/guzzle/guzzle',
      'version' => '6.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
  );
}


/**
 * Implements hook_ding_entity_buttons().
 */
function ting_das_ding_entity_buttons($type, $entity, $widget = 'default') {
  $button = '';

  if ($type == 'ding_entity' && $entity->is('reservable')) {
    switch ($widget) {
      case 'ajax':
        drupal_add_library('system', 'drupal.ajax');

        $button = array(
          array(
            '#theme' => 'link',
            '#text' => t('DAS'),
            '#path' => 'das/' . $entity->id . '/order',
            '#options' => array(
              'attributes' => array(
                'class' => array(
                  'action-button',
                  'reserve-button',
                  'use-ajax',
                ),
                'id' => 'das-order-' . $entity->id,
              ),
              'html' => FALSE,
            ),
          ),
        );
        break;

      default:
        // The last parameter to the form below (TRUE) hides the provider
        // options in the form (interest period and branch).
        $button = array(ding_provider_get_form('ding_reservation_reserve_form', new DingReservationReservableEntity($entity), TRUE));
        break;
    }
  }

  return $button;
}

/**
 * Entity button ajax callback handler.
 *
 *
 * @param $entity
 *
 * @return array
 */
function ting_das_ajax($entity) {
  $commands = array();

  // Check if the logged in user is a library user.
  global $user;
  if (!user_is_logged_in()) {
    $commands[] = ajax_command_ding_user_authenticate('');
  }
  elseif (!ding_user_is_provider_user($user)) {
    // Error not library user.
    $commands[] = ajax_command_ding_popup('ting_das', t('Error'), '<p>' . t('Only library user can make DAS requests.') . '</p>', array('refresh' => FALSE));
  }
  elseif (!(is_object($entity) && $entity instanceof TingEntity)) {
    // Error not ting entity.
    $commands[] = ajax_command_ding_popup('ting_das', t('Error'), '<p>' . t('Unable to load information about the material.') . '</p>', array('refresh' => FALSE));
  }
  else {

    $form = drupal_get_form('ting_das_order_form', $entity);
    $content = drupal_render($form);
    $commands[] = ajax_command_ding_popup('ting_das', t('Order digital copy'), $content, array('refresh' => FALSE));
  }

  // Return the ajax commands as an render array.
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Defines the order copy form.
 *
 * @param string $form_id
 *   The forms id.
 * @param array $form_state
 *   The current state of the form.
 * @param \TingEntity $entity
 *   The entity the form was activated on.
 *
 * @return array
 *   The form.
 */
function ting_das_order_form($form_id, &$form_state, TingEntity $entity) {
  $form = array();

  global $user;
  $provider = _ding_provider_get_provider('user');
  $profile = ding_user_provider_profile($user);
  if ($profile) {
    $profile = entity_metadata_wrapper('profile2', $profile);
  }

  $form['entity'] = array(
    '#tree' => TRUE,
  );

  $form['entity']['pid'] = array(
    '#type' => 'value',
    '#value' => $entity->getId(),
  );

  $form['entity']['title'] = array(
    '#type' => 'value',
    '#value' => $entity->getTitle(),
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => $profile ? $profile->{'field_' . $provider['module'] . '_name'}->value() : '',
  );

  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Mail address'),
    '#default_value' => $profile ? $profile->{'field_' . $provider['module'] . '_mail'}->value() : '',
  );

  $form['loaner_id'] = array(
    '#type' => 'password',
    '#title' => t('Loaner id'),
  );

  $function = $provider['module'] . '_user_branches';
  $preferred_branch = $profile ? $profile->{'field_' . $provider['module'] . '_preferred_branch'}->value() : '';
  $form += ding_reservation_default_options_branch('fbs_preferred_branch', $preferred_branch, $function($user));

  $default_interest_period = ding_provider_invoke('reservation', 'default_interest_period');
  $form += ding_reservation_interest_period_selector('interest_period', $default_interest_period, _ting_das_get_interest_periods());

  $defaults = variable_get('ting_das_consent', FALSE);
  $form['consent'] = array(
    '#type' => 'checkbox',
    '#title' => $defaults['label'] ?? t('I agree to the terms of usage'),
    '#prefix' => $defaults['prefix']
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#submit' => array('ting_das_order_form_submit'),
    '#ajax' => array(
      'callback' => 'ting_das_order_form_ajax_callback',
    ),
    '#value' => t('Order digital copy'),
    '#states' => array(
      'disabled' => array(
        ':input[name="consent"]' => array(
          'unchecked' => TRUE,
        ),
      ),
    ),
  );

  return $form;
}

/**
 * Submit handler for the order form.
 */
function ting_das_order_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $client = _ting_das_get_client();


  $client->setUserName($values['name']);
  $client->setUserMail($values['mail']);
  $client->setUserLoanerId($values['loaner_id']);
  $client->setUserInterestDate($values['interest_period']);
  $client->setPickupAgencyId($values['fbs_preferred_branch']);
  $client->setAgencyId(variable_get('ting_agency', ''));

  $client->setPid($values['entity']['pid']);
  $client->setPublicationTitle($values['entity']['title']);

  $status = $client->send();
  $t=1;

  // @TODO: Set order status in form_state for ajax callback.
}

/**
 * Ajax callback for the order copy form.
 */
function ting_das_order_form_ajax_callback($form, &$form_state) {
  // @TODO: Handle status from form_state.

  $response = array(
    '#type' => 'ajax',
    '#commands' => array(),
  );

  $html = theme('status_messages') . t('Your order have been placed.');
  $response['#commands'][] = ajax_command_ding_popup('ding_reservation', t('Digital copy ordered'), $html, array('refresh' => FALSE));

  return $response;
}

/**
 * Get DAS client.
 *
 * @return \TingDasCopyRequest
 *   Client to communicate with the service.
 */
function _ting_das_get_client() {
  static $client;

  if (!isset($client)) {
    module_load_include('inc', 'ting_das', 'includes/ting_das.clint');
    $config = variable_get('ting_das', FALSE);
    if (is_array($config)) {
      $client = new TingDasCopyRequest($config['url'], $config['username'], $config['password']);
    }
    else {
      watchdog('ting_das', 'The ting_das module is missing its configuration', NULL, WATCHDOG_ERROR);
    }
  }

  return $client;
}

/**
 * Get interest periods options for orders placed in DAS.
 *
 * @return array
 *   The interest periods index by days and formatted as months.
 */
function _ting_das_get_interest_periods() {
  $periods = array(
    1 => 30,
    2 => 60,
    3 => 90,
    6 => 180,
    12 => 360,
  );
  $options = array();
  foreach ($periods as $months => $days) {
    $options[$days] = format_plural($months, '1 month', '@count months');
  }

  return $options;
}
