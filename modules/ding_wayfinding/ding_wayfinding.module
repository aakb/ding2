<?php
/**
 * @file
 * Integration with https://universal-wayfinding.libry.dk/ for way finding.
 */

/**
 * Implements hook_menu().
 */
function ding_wayfinding_menu() {
  $items = [];

  $items['admin/config/ding/wayfinding'] = [
    'title' => 'Wayfinding',
    'description' => 'Library wayfinding.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ding_wayfinding_settings_form'],
    'access arguments' => ['administer wayfinding'],
    'file' => 'includes/ding_wayfinding.admin.inc',
  ];

  $items['ding_wayfinding/%/%'] = [
    'title' => 'Wayfinding',
    'description' => 'Library wayfinding.',
    'type' => MENU_CALLBACK,
    'page callback' => 'ding_wayfinding_show_map',
    'page arguments' => [1, 2],
    'delivery callback' => 'ajax_deliver',
    'access arguments' => ['access content'],
  ];

  return $items;
}

/**
 * Get agency id.
 *
 * Fallback to ting_agency_id.
 *
 * @param bool $prefix
 *  If true the agency is prefixed with 'DK-'. Default false.
 *
 * @return string
 *   Agency id, if found else the empty string.
 */
function ding_wayfinding_get_agency_id($prefix = false) {
  $ret = variable_get('ding_wayfinding_agency_id', variable_get('ting_agency', ''));
  if ($prefix && $ret != '') {
    $ret = 'DK-' . $ret;
  }
  return $ret;
}

/**
 * Implements hook_preprocess_ding_holdings.
 *
 * Add wayfinding map triggers to holdings table if point-of-interest (POI) if
 * found for the material request holdings for.
 */
function ding_wayfinding_preprocess_ding_holdings(&$variables) {
  $provider_id = $variables['provider_id'];
  $item = $variables['item'];

  // Load information about branch names base on branch id's in selected in the
  // administrative interface.
  $branches = ding_wayfinding_get_branches();
  $active_branches = array_filter(variable_get('ding_wayfinding_branches', []));
  $filtered_branches = array_flip(array_intersect_key($branches, $active_branches));

  $found = FALSE;
  $rows = [];
  foreach ($variables['holdings']['#rows'] as $id => $row) {
    // This adding to rows are done in this way, and not by reference, to enable
    // us only add the "Map" row when point-of-interest is found.
    $rows[$id] = $row;
    $rows[$id]['wayfinding'] = '';

    if (array_key_exists($item['holdings'][$id]['placement'][0], $filtered_branches)) {
      $branch_id = $filtered_branches[$item['holdings'][$id]['placement'][0]];
      if (ding_wayfinding_has_location($provider_id, $branch_id)) {
        $rows[$id]['wayfinding'] = '<a href="/ding_wayfinding/'.$branch_id.'/'.$provider_id.'" class="wayfinding use-ajax">x</a>';
        $found = TRUE;
      }
    }
  }

  // If POI was found add new rows to the table.
  if ($found) {
    $variables['holdings']['#header']['wayfinding'] = t('Map', [], ['context' => 'ding_wayfinding']);
    $variables['holdings']['#rows'] = $rows;
  }
}

/**
 * Get available branches from the current provider.
 *
 * @return array
 *   The available branches name keyed by branch id.
 */
function ding_wayfinding_get_branches() {
  // Find default branches based on the current provider.
  $provider = _ding_provider_get_provider('user');
  $function = $provider['module'] . '_user_branches';
  $branches = [];
  if (is_callable($function)) {
    $branches = $function();
  }

  return $branches;
}

/**
 * Check the wayfinding server location exists for faust.
 *
 * @param int $faust
 *   The faust to check location for.
 * @param string $branch
 *   The branch to check for the faust on.
 *
 * @return bool
 *   If location found TRUE else FALSE.
 */
function ding_wayfinding_has_location($faust, $branch) {
  $slug = variable_get('ding_wayfinding_type', 'fbs');
  $url = 'https://wayfinding.libry.dk/api/v1/sdk/bob/' . $slug . '-mapspeople';
  $res =  drupal_http_request($url, [
    'method' => 'POST',
    'headers' => [
      'x-api-key' => variable_get('ding_wayfinding_api_key', ''),
      'Content-Type' => 'application/json',
    ],
    'data' => json_encode([
      'branch' => $branch,
      'faust' => (string)$faust,
    ]),
  ]);

  if ($res->code == 200) {
    $data = json_decode($res->data);
    if (!empty($data)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Ajax callback function to display map.
 *
 * @param $branch
 *   The branch id to show POI on map (filter.
 * @param $faust
 *   The faust of the POI to show on the map.
 *
 * @return array
 *   Render array with ajax-commands.
 */
function ding_wayfinding_show_map($branch, $faust) {
  $commands[] = ajax_command_ding_popup('ding_wayfinding', t('Way finding map'), '<p>' . t('Show me the map') . '</p>');

  return [
    '#type' => 'ajax',
    '#commands' => $commands,
  ];
}
